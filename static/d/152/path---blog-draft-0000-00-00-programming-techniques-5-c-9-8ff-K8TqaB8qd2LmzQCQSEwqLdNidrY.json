{"data":{"markdownRemark":{"html":"<p>todo read <a href=\"https://medium.com/@yannickdot/functional-programming-techniques-in-javascript-c7f8a99e5c49\">https://medium.com/@yannickdot/functional-programming-techniques-in-javascript-c7f8a99e5c49</a></p>\n<p>Techniques are your tools the more you have tool then easier you can solve a problem. It is difficult to get a nail from a wall when you have a hammer only. Even a big hammer is a formidable tool, how much you can build when you have a big hammer only?</p>\n<p>There are so many techniques to learn from functional and object-oriented programming languages. Let see what we can use.</p>\n<h2>Dependency injection</h2>\n<p>todo</p>\n<h2>Dependency inversion</h2>\n<p>todo</p>\n<h2>Closure</h2>\n<p>todo</p>\n<h2>Partial application</h2>\n<p>Python example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> partial\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\nadd_10 <span class=\"token operator\">=</span> parial<span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nadd_10<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => 17</span></code></pre></div>\n<h2>Currying</h2>\n<p>Functional design pattern</p>\n<p>Reduce a function with multiple arguments</p>\n<p>To a chain of higher-order functions that take one argument</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">add(1, 2, 3) -&gt; add(1)(2)(3)</code></pre></div>\n<p>Python example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> partial\n<span class=\"token keyword\">def</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">curried</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parameters <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> fn<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> curry<span class=\"token punctuation\">(</span>partial<span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> curried\n@curry\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => 17</span></code></pre></div>\n<h2>Decorator</h2>\n<p>todo</p>\n<h2>Monad</h2>\n<p>todo description (Take from wiki, or write yourself when realy understand it0</p>\n<p>In functional programming, a monad is a design pattern that defines how functions, actions, inputs, and outputs can be used together to build generic types, with the following organization:</p>\n<ol>\n<li>Define a data type, and how values of that data type are combined.</li>\n<li>Create functions that use the data type, and compose them together into actions, following the rules defined in the first step.</li>\n</ol>\n<h2>Recursion</h2>\n<p>todo</p>\n<h2>Generator</h2>\n<p>todo</p>\n<h2>Memoization</h2>\n<p>Memoization technique is useful when dealing with expensive computations.</p>\n<p>If for each set of arguments method or function always returns the same result we can store the computed result of a call and return it next time when we get the same call with the same arguments.</p>\n<p>Python example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n    cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fn_with_cache</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> args <span class=\"token keyword\">in</span> cache<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">[</span>args<span class=\"token punctuation\">]</span>\n        result <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span>\n        cache<span class=\"token punctuation\">[</span>args<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token keyword\">return</span> fn_with_cache</code></pre></div>\n<h2>Polymorphism</h2>\n<p>Polymorphism has different forms varying from language to language.</p>\n<h3>Static languages, static polymorphism</h3>\n<p>todo</p>\n<h3>Static languages, dynamic polymorphism</h3>\n<p>todo</p>\n<h3>Dynamic languages, duck-typing</h3>\n<p>todo</p>\n<h2>Inheritance</h2>\n<p>It is often misused for code sharing. Remember, inheritance is not for code sharing it is for specialization. To demonstrate it in action consider the following ruby example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">House</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">EchoHouse</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomHouse</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomEchoHouse</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>When inheritance is useful? When you need specialization. Because in a real-world, which OOP is trying to model, we not often encounter a pure hierarchal tree inheritance (even classical animal tree example is not so obvious to model as inheritance) is useful in rare cases.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">todo a goood example</code></pre></div>\n<h2>Encapsulation?</h2>\n<p>todo</p>\n<h2>Method overloading</h2>\n<p>todo</p>\n<h2>Operator overloading</h2>\n<p>todo</p>\n<h2>Lazy evaluation (iterators)</h2>\n<p>todo</p>\n<h2>Functional abstraction</h2>\n<p>todo</p>\n<h2>Composition</h2>\n<p>todo</p>\n<h2>Decomposition</h2>\n<p>todo</p>\n<h2>Metaprogramming</h2>\n<p>todo</p>\n<hr>\n<p>What is your favourite technique/pattern? (tweet)</p>","frontmatter":{"title":"Programming techniques (and patterns?)","description":"Explore varying programming techniques and enrich your set of tools","related":null}}},"pageContext":{"slug":"/blog/draft/0000-00-00-programming-techniques/","previous":{"fields":{"slug":"/blog/tech/2019-03-11-99-bottles-of-oop/"},"frontmatter":{"title":"99 Bottles of Object-Oriented Programming","description":"Book review of “99 Bottle of OOP” by Sandi Metz and Katrina Owen","date":"2019-03-11T00:00:00.000Z"}},"next":{"fields":{"slug":"/blog/draft/0000-00-00-advices-for-junior-developers/"},"frontmatter":{"title":"Advices for junior developers","description":null,"date":null}}}}