{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Unfortunately, when you name a method after its current implementation, you can never change that internal implementation without ruining the method name.You should name methods not after what they do, but after what they mean, what they represent in the context of your domain.\nSandi Metz, Katrina Owen. 99 Bottles of OOP (Kindle Locations 946–948). Kindle Edition.</p>\n</blockquote>\n<p> - </p>\n<blockquote>\n<p>Therefore, one lesson to be gleaned from this solution is that you should name methods after the concept they represent rather than how they currently behave.\nSandi Metz, Katrina Owen. 99 Bottles of OOP (Kindle Locations 965–966). Kindle Edition.</p>\n</blockquote>\n<p> - </p>\n<blockquote>\n<p>First, changing the name avoids the \"echo chamber\" effect. BottleNumber.bottle<em>number</em>for is both redundant and overly specific. It suffers from the same ailment as the beer method in Chapter 1. This name is tightly coupled to the current context, and tight coupling makes code resistant to change. For example, if you someday decide to rename the BottleNumber class, you'll have to change this method name too, or forever be misled.\nSandi Metz, Katrina Owen. 99 Bottles of OOP (Kindle Locations 10968–10973). Kindle Edition.</p>\n</blockquote>\n<p>… continuation</p>\n<blockquote>\n<p>Second, and more abstractly, for supports polymorphism. To illustrate how, consider to<em>s . As you've seen, Object implements a default to</em>s , and many classes supply their own more specific implementation. Because all are named to<em>s , you can confidently send this generic request to any receiver.\nImagine the consequences of including the receiver's type in the message name, as in hash</em>to<em>s , float</em>to<em>s , and, inevitably, string</em>to_s . Adding type information defeats polymorphism, and forces you to check the type of the receiver before sending this message. This vastly complicates code for no good reason.\nSandi Metz, Katrina Owen. 99 Bottles of OOP (Kindle Locations 10973–10982). Kindle Edition.</p>\n</blockquote>\n<p>… continuation of the idea</p>\n<blockquote>\n<p>Just like to_s , for is a generic request that works fine as the name of any factory. When factory-ish objects polymorphically implement for , you can send this message without regard for the receivers' type. Polymorphism preserves the option of constructing applications where the factories themselves are substitutable.\nSandi Metz, Katrina Owen. 99 Bottles of OOP (Kindle Locations 10982–10986). Kindle Edition.</p>\n</blockquote>","frontmatter":{"title":"On naming things","description":null,"related":null}}},"pageContext":{"slug":"/blog/tech/0000-00-00-on-naming-things/","previous":{"fields":{"slug":"/blog/tech/2019-02-11-essential-books-that-every-programmer-should-read/"},"frontmatter":{"title":"Essential Books That Every Programmer Should Read","description":"The books recommendations from the Bozhidar's talk, lists by Uncle Bob, and Kent Beck, books from blog posts by Jeff Atwood and DHH.","date":"2019-02-11T00:00:00.000Z"}},"next":{"fields":{"slug":"/blog/tech/0000-00-00-math-tricks-for-developers/"},"frontmatter":{"title":"Math tricks for developers (consider more marketish title)","description":null,"date":null}}}}