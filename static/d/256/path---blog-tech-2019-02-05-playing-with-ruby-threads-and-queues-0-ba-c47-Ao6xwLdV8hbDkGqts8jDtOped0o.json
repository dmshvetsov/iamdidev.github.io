{"data":{"markdownRemark":{"html":"<p>Threads are the Ruby implementation for a concurrent programming. Threads are existing within an Operating System Process and have access to its memory. Actually, any code written in Ruby executes within a thread — main thread.</p>\n<p>Threads are useful when code can be executed independently, especially when code spends time waiting for external events. This kind of situations happens when you dealing with Input and Output operations (I/O).</p>\n<p>I have an example.</p>\n<hr>\n<p>Enter Worker.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>The whole purpose of the Worker is to do work. But what makes it useful is that it can do it in separate thread or threads.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>num_threads<span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@num_threads</span> <span class=\"token operator\">=</span> num_threads\n    <span class=\"token variable\">@threads</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n  attr_reader <span class=\"token symbol\">:num_threads</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:threads</span>\n  <span class=\"token keyword\">private</span> <span class=\"token symbol\">:threads</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">spawn_threads</span></span>\n    num_threads<span class=\"token punctuation\">.</span>times <span class=\"token keyword\">do</span>\n      threads <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token builtin\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">do</span>\n        <span class=\"token comment\"># there will be work that the worker performs</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Since threads are useful for heavy I/O operations this worker is perfect to do HTTP requests, manipulate with files on disk, make DB requests.</p>\n<p>“Hey, worker! Send this data to API and fetch some data from another API, after save some of it data in my database and don’t forget to log all you have done into a log file” — this is a perfect job for the worker.</p>\n<hr>\n<p>How we may pass work to the worker?</p>\n<p>It is straightforward If you have to perform one single monotonous task every time.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span>\n  <span class=\"token comment\"># rest of the class omitted</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">spawn_threads</span></span>\n    num_threads<span class=\"token punctuation\">.</span>times <span class=\"token keyword\">do</span>\n      threads <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token builtin\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">do</span>\n        <span class=\"token constant\">HealthService</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>ping <span class=\"token comment\"># send a HTTP request</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>But what if you need to perform various kind of work depending on external circumstances.</p>\n<hr>\n<p>Queues to the rescue!</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>num_threads<span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@num_threads</span> <span class=\"token operator\">=</span> num_threads\n    <span class=\"token variable\">@threads</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token variable\">@queue</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Queue</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n  <span class=\"token class-name\">end</span>\n  <span class=\"token comment\"># rest of the class omitted</span>\n  \n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">enqueue</span></span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n    queue<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>With <code class=\"language-text\">Worker#enqueue</code> method, it is now possible to pass work to the Worker. This can be done in many ways. For example, <code class=\"language-text\">action</code> can be a Proc and <code class=\"language-text\">payload</code> can be arguments for the Proc.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">\"net/http\"</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">\"json\"</span>\naction <span class=\"token operator\">=</span> proc <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>data<span class=\"token operator\">|</span>\n  <span class=\"token constant\">Net</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">HTTP</span><span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>\n    <span class=\"token constant\">URI</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.some-ping-service.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Content-Type\"</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"applicatoin/json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\nworker_instance<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> ok<span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>What is great about Ruby implementation of Queues it that they are thread-safe by nature.</p>\n<hr>\n<p>To perform actions that enqueued into Worker and do not take all CPU resources we need to do arrange dequeued algorithm in a smart way.</p>","frontmatter":{"title":"Playing with Ruby Threads and Queues","description":"Example of how to use queues to simplify multithereaded code in Ruby","related":null}}},"pageContext":{"slug":"/blog/tech/2019-02-05-playing-with-ruby-threads-and-queues/","previous":{"fields":{"slug":"/blog/tech/2018-09-11-programming-workout/"},"frontmatter":{"title":"Programming workout","description":"The way to become a better programmer through repetitive exercises","date":"2018-09-11T00:00:00.000Z"}},"next":null}}